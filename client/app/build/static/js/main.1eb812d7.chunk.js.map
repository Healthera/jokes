{"version":3,"sources":["api.js","joke/select.js","joke/create.js","type/create.js","joke/random.js","joke/jokes.js","home/home.js","index.js"],"names":["base","createType","name","a","axios","post","getManyTypes","get","getRandomJoke","getPaginatedJokes","page","size","type","deleteJoke","_id","delete","data","updateJoke","_type","text","put","createJoke","SelectType","props","fillSelectType","status","setSelectList","alert","console","log","useEffect","id","value","selectedType","onChange","ev","setSelectedType","target","selectList","map","opt","key","CreateJoke","useState","textInput","setTextInput","saveJoke","result","close","placeholder","className","onClick","CreateType","nameInput","setNameInput","saveType","RandomJoke","random","setRandom","getRandom","joke","Jokes","pagination","setPagination","jokes","setJokes","updateId","setUpdateId","updatedText","setUpdatedText","getJokes","goPage","removeJoke","filter","modifyJoke","showUpdateJoke","Home","setCreateJoke","setCreateType","randomJoke","setRandomJoke","render","document","getElementById"],"mappings":"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","file":"static/js/main.1eb812d7.chunk.js","sourcesContent":["import axios from \"axios\"\n\nconst base = \"http://localhost:3050\"\n\nexport const createType = async name => {\n    return await axios.post(`${base}/types/create/`, {\n        \"_id\": \"n/a\",\n        \"name\": name\n    })\n}\n\nexport const getManyTypes = async () => {\n    return await axios.get(`${base}/types/get`)\n}\n\nexport const getRandomJoke = async () => {\n    return await axios.get(`${base}/jokes/random`)\n}\n\nexport const getPaginatedJokes = async(page, size, type) => {\n    if(!type)\n        return await axios.get(`${base}/jokes/get/page/${page}/size/${size}`)\n    else\n        return await axios.get(`${base}/jokes/get/type/${type}/page/${page}/size/${size}`)\n}\n\nexport const deleteJoke = async _id => {\n    return await axios.delete(`${base}/jokes/delete`, { data: { \"_id\": _id } })\n}\n\nexport const updateJoke = async (_id, _type, text) => {\n    return await axios.put(`${base}/jokes/update`, {\n        \"_id\": _id,\n        \"_type\": _type,\n        \"text\": text\n    })\n}\n\nexport const createJoke = async (_type, text) => {\n    return await axios.post(`${base}/jokes/create`, {\n        \"_id\": \"n/a\",\n        \"_type\": _type,\n        \"text\": text\n    })\n}","import React, { useEffect } from \"react\"\nimport { getManyTypes } from \"../api\"\n\nconst SelectType = props => {\n\n    /**\n     * This function is called everytime the component is created\n     * This is not a good approach for a real world application since\n     * its going to request data again and again. I did this way for the\n     * simplicity.\n     */\n    const fillSelectType = async () => {\n        try {\n            const data = await getManyTypes()\n\n            if(data && data.status === 200)\n                props.setSelectList(data.data)\n        } catch(err) {\n            alert(\"Errors Errors Errors Everywhere :c check logs\")\n            console.log(err)\n        }\n    }\n\n    useEffect(() => {\n        fillSelectType()\n    },[])\n\n    return (\n        <select id=\"select-type\"\n          value={props.selectedType}\n          onChange={ ev => props.setSelectedType(ev.target.value) }> \n\n          <option value=\"\"></option> \n          \n          { \n            props.selectList.map(opt => {\n                return <option key={opt._id} value={opt._id}>{opt.name}</option>\n          }) }\n          \n          </select>\n    )\n}\n\nexport default SelectType","import React, { useState } from \"react\"\nimport { createJoke } from \"../api\"\nimport SelectType from \"./select\"\n\nconst CreateJoke = props => {\n    const [textInput, setTextInput] = useState(\"\")\n    const [selectedType, setSelectedType] = useState(\"\")\n    const [selectList, setSelectList] = useState([])\n\n    /**\n     * Basically when save a joke the component will be destroyed,\n     * if a joke is not saved, it will keep the component alive but\n     * raising an error message to the client.\n     */\n    const saveJoke = async () => {\n        if(!textInput || !selectedType) {\n            alert(\"A very tiny bird told me that you should select a type and then write an amazing joke before hiting save\")\n        } else {\n            try {\n                const result = await createJoke(selectedType, textInput)\n                if(result && result.status === 201)\n                    props.close()\n            } catch(err) {\n                alert(\"Oh no :c we have an error saving this amazing joke\")\n                console.log(err)\n            }\n        }\n    }\n\n    return (\n      <div id=\"create-joke\">\n          \n          <SelectType \n            selectList={ selectList } \n            setSelectList={ setSelectList } \n            setSelectedType={ setSelectedType }\n            selectedType={ selectedType } />\n\n          <input \n            onChange={ev => setTextInput(ev.target.value)} \n            type=\"text\" \n            placeholder=\"Write here your best joke\">\n          </input>\n          <button className=\"save\" onClick={saveJoke}>Save</button>\n          <hr />\n      </div>\n    );\n}\n\nexport default CreateJoke\n","import React, { useState } from \"react\"\nimport { createType } from \"../api\"\n\nconst CreateType = props => {\n    const [nameInput, setNameInput] = useState(\"\")\n\n    const saveType = async () => {\n        try {\n            const result = await createType(nameInput)\n            if(result && result.status === 201)\n                props.close()\n        } catch(err) {\n            alert(\"I'm not calling the server without a name, she gets angry easily :c\")\n            console.log(err)\n        }\n    }\n\n    return (\n      <div id=\"create-type\">\n          <input \n            onChange={ev => setNameInput(ev.target.value)} \n            type=\"text\"\n            placeholder=\"Type name here\" />\n          <button className=\"save\" onClick={ saveType }>Save</button>\n          <hr />\n      </div>\n    )\n}\n\nexport default CreateType\n","import React, { useState, useEffect } from \"react\"\nimport { getRandomJoke } from \"../api\"\n\nconst RandomJoke = () => {\n    const [random, setRandom] = useState({})\n\n    const getRandom = async () => {\n        try {\n            const joke = await getRandomJoke()\n            \n            if(joke && joke.status === 200)\n                setRandom(joke.data)\n        } catch(err) {\n            alert(\"I think this error appeared because I cannot find a nice Joke :c check logs please\")\n            console.log(err)\n        }\n    }\n\n    useEffect(() => {\n        getRandom()\n    }, [])\n\n    return (\n        <div id=\"random-joke\">\n            { random.text }\n            <h2>Nice one :)</h2>\n        </div>\n    )\n}\n\nexport default RandomJoke","import React, { useState, useEffect } from \"react\"\nimport SelectType from \"./select\"\nimport { getPaginatedJokes, deleteJoke, updateJoke } from \"../api\"\n\nconst Jokes = () => {\n    const [pagination, setPagination] = useState({ \"page\": 0, \"size\": 10 })\n    const [jokes, setJokes] = useState([])\n    const [selectedType, setSelectedType] = useState(\"\")\n    const [selectList, setSelectList] = useState([])\n    const [updateId, setUpdateId] = useState(\"\")\n    const [updatedText, setUpdatedText] = useState(\"\")\n    \n    const getJokes = async () => {\n        try {\n            const result = await getPaginatedJokes(pagination.page, pagination.size,\n                SelectType !== \"\" ? selectedType : null)\n\n            if(result && result.status === 200)\n                setJokes(result.data)\n        } catch(err) {\n            alert(\"Something happened trying to get some nice jokes, check the logs\")\n            console.log(err)\n        }\n    }\n\n    const goPage = async page => {\n        setPagination({ \"page\": page, \"size\": 10})\n    }\n\n    const removeJoke = async _id => {\n        try {\n            const result = await deleteJoke(_id)\n            if(result && result.status === 200)\n                setJokes(jokes.filter(joke => { return joke._id !== _id}))\n        } catch(err) {\n            alert(\"Cannot remove this Joke, because it's too much amazing... No :c check the logs\")\n            console.log(err)\n        }\n    }\n\n    const modifyJoke = async (_id, _type) => {\n        try {\n            const result = await updateJoke(_id, _type, updatedText)\n            \n            if(result && result.status === 200) {\n                setJokes(jokes.map(joke => {\n                    if(joke._id === _id) {\n                        joke.text = updatedText\n                    }\n    \n                    return joke\n                }))\n    \n                setUpdatedText(\"\")\n                setUpdateId(\"\")\n            }\n        } catch(err) {\n            console.log(err)\n        }\n    }\n\n    const showUpdateJoke = async _id => {\n        setUpdatedText(\"\")\n\n        if(_id === updateId)\n            setUpdateId(\"\")\n        else\n            setUpdateId(_id)\n    }\n\n    /**\n     * This Effect is going to watch page and if changes\n     * it will make a call to the api providing the new page and size\n     */\n    useEffect(() => {\n        getJokes()\n    },[pagination.page])\n\n    /**\n     * This Effect watches selectedType, if the admin wants to filter\n     * all the jokes by its type, just change the select, it will reset\n     * the pagination and also make a request, choose empty to no filter.\n     */\n    useEffect(() => {\n        setPagination({ \"page\": 0, \"size\": 10 })\n        getJokes()\n    }, [selectedType])\n\n    return(\n        <div id=\"jokes\">\n            <h4>You can filter by type... \n                <SelectType \n                selectList={ selectList } \n                setSelectList={ setSelectList } \n                setSelectedType={ setSelectedType }\n                selectedType={ selectedType } />\n            </h4>\n\n            <table>\n                <thead>\n                    <tr>\n                        <th id=\"tb-joke\">Joke</th>\n                        <th id=\"tb-type\">Type</th>\n                        <th id=\"tb-opt\">Options</th>\n                        { updateId ? <th>Input</th> : null }\n                    </tr>\n                </thead>\n                <tbody>\n            { \n                jokes.map(joke => {\n                    return (\n                    <tr key={ joke._id }>\n                        <td>{ joke.text }</td>\n                        <td>{ joke._type.name }</td>\n                        <td> \n                            <button className=\"delete\" onClick={ () => removeJoke(joke._id) }>delete</button> | \n                            <button className=\"update\" onClick={ () => showUpdateJoke(joke._id) }>update</button>\n                        </td>\n                        <td>\n                            { \n                                updateId === joke._id ? \n                                <div id=\"update\">\n                                    <input \n                                        type=\"text\" \n                                        onChange={ ev => setUpdatedText(ev.target.value) }/>\n                                    <button className=\"save\" onClick={ () => modifyJoke(updateId, joke._type._id) }>save</button>\n                                </div>\n                                : null\n                            }\n                        </td>\n                    </tr>\n                    )\n                })\n            }\n                </tbody>\n            </table>\n            <div id=\"pagination\">\n                { pagination.page > 0 ?\n                    <button className=\"pag\" onClick={ () => goPage(pagination.page-1) }>previous page</button>\n                    : null\n                }\n                <button className=\"pag\" onClick={ () => goPage(pagination.page+1) }>next page</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Jokes","import React, { useState } from \"react\"\nimport CreateJoke from \"../joke/create\"\nimport CreateType from \"../type/create\"\nimport RandomJoke from \"../joke/random\"\nimport Jokes from \"../joke/jokes\"\n\nconst Home = () => {\n    const [createJoke, setCreateJoke] = useState(false)\n    const [createType, setCreateType] = useState(false)\n    const [randomJoke, setRandomJoke] = useState(false)\n    const [jokes, setJokes] = useState(false)\n\n    const showCreateJoke = () => {\n        setCreateJoke(!createJoke)\n        setCreateType(false)\n    }\n\n    const showCreateType = () => {\n        setCreateType(!createType)\n        setCreateJoke(false)\n    }\n\n    const showJokes = () => {\n        setJokes(!jokes)\n        setRandomJoke(false)\n    }\n\n    const showRandomJoke = () => {\n        setRandomJoke(!randomJoke)\n        setJokes(false)\n    }\n\n    return (\n      <div id=\"home\">\n        <h1>Jokes Portal</h1>\n\n        { createJoke ? <CreateJoke close={ () => setCreateJoke(false) } /> : null }\n        { createType ? <CreateType close={ () => setCreateType(false) } /> : null }\n\n        <button className=\"menu\" onClick={ showCreateType } >Create new Type</button>\n        <button className=\"menu\" onClick={ showCreateJoke }>Create new Joke</button>\n        <button className=\"menu\" onClick={ showJokes }>Get Jokes</button>\n        <button className=\"menu\" onClick={ showRandomJoke }>Get Random Joke</button>\n        <hr />\n\n        { jokes ?  <Jokes /> : null }\n        { randomJoke ? <RandomJoke /> : null }\n      </div>\n    )\n}\n\nexport default Home\n","import React from 'react'\nimport { render } from 'react-dom'\nimport Home from './home/home'\n\n\nconst App = () => {\n    return (\n      <div>\n        <Home />\n      </div>\n    )\n}\n\nrender(<App />, document.getElementById('root'))"],"sourceRoot":""}